<?xml version="1.0" encoding="utf-8"?>
<article xmlns="http://docbook.org/ns/docbook" version="5.0" xml:lang="en">
<info>
<author>
<firstname>Alef Sheridan Ariel</firstname>
<surname>Ramírez Chiñas</surname>
</author>
<revhistory>

<revision>
<date>Thu Jun  2 14:21:08 CDT 2016</date>
<revnumber>1.0</revnumber>
<revremark>Finished the translation and DocBook structure.</revremark>
<authorinitials>asarch</authorinitials>
</revision>

</revhistory>
</info>

<title>Critical path for a new Django project and application</title>

<orderedlist enumeration="arabic">

<listitem>
<para>Create the project:</para>

<screen><![CDATA[[$] django-admin startproject projects]]></screen>
</listitem>

<listitem>
<para>Create the application:</para>

<screen><![CDATA[[$] cd projects

[$] python manage.py startapp app1]]></screen>
</listitem>

<listitem>
<para>Configure the project:</para>

<screen><![CDATA[[$] vi projects/settings.py]]></screen>

<programlisting language="python" linenumbering="numbered"><![CDATA[SECRET_KEY = '....'

DATABASES = {
	'app1' : {
		'ENGINE' : 'django.db.backends.postgresql_psycopg2',
		'NAME' : 'dbname',
		'USER' : 'user',
		'PASSWORD' : 'host',
		'HOST' : 'address',
		'PORT' : '5432'
	}
}

DATABASE_ROUTERS = ['projects.router.default']

TIME_ZONE = 'Mexico/General']]></programlisting>
</listitem>

<listitem>
<para>Enable the default database router for the project:</para>

<screen><![CDATA[[$] vim projects/router.py]]></screen>

<programlisting language="python" linenumbering="numbered"><![CDATA[# In settings.py, after the databases declaration:
#
# DATABASE_ROUTERS = ['projects.router.default']
apps = [
    'app1',
    'app2',
    ...,
    'appn',
]

tables = [
    # app1 tables
    'app1_table1', 'app1_table2', ..., 'app1_tablen',
    
    # app2 tables
    'app2_table1', 'app2_table2', ..., 'app2_tablen',
    
    ...,
    
    # appn tables
    'app1_table1', 'app1_table2', ..., 'app1_tablen',
]

class default(object):
	def db_for_read(self, model, **hints):
		if model._meta.app_label in apps:
			return model._meta.app_label

		return 'default'

	def db_for_write(self, model, **hints):
		if model._meta.app_label in apps:
			return model._meta.app_label

		return 'default'

	def allow_relation(self, obj1, obj2, **hints):
		if obj1._meta.app_label in apps and obj2._meta.app_label in apps:
			return True
		elif [obj1._meta.app_label, obj2._meta.app_label] not in apps:
			return True

		return False

	def allow_migrate(self, db, app_label, model_name=None, **hints):
		if db in tables or model_name in apps:
			return False

		return True

]]></programlisting>
</listitem>

<listitem>
<para>Get the tables for the application:</para>

<screen><![CDATA[[$] python manage.py inspectdb --database=agenda | \
sed 's/    /\t/g' >> app1/models.py]]></screen>
</listitem>

<listitem>
<para>Configure the admin.py module of the application:</para>

<programlisting language="python" linenumbering="numbered"><![CDATA[# app1/admin.py

#---------------------------------------------------------------------
# First version
#---------------------------------------------------------------------

from django.contrib import admin
from django.db.models.base import ModelBase

import models

for name,var in models.__dict__.items():
	if type(var) is ModelBase:
		admin.site.register(var)

#---------------------------------------------------------------------
# Second version
#---------------------------------------------------------------------

from django.contrib import admin
from django.db.models.base import ModelBase

import models

from models import Student

class StudentAdmin(admin.ModelAdmin):
	list_display = ('first_name', 'last_name')
	
# Register your models here

for name,var in models.__dict__.items():
	if var != Nota:
		if type(var) is ModelBase:
			admin.site.register(var)
			
admin.site.register(Studen, StudentAdmin)

#---------------------------------------------------------------------
# Third version
#---------------------------------------------------------------------

import models

from models import Student
from models import Note

class StudentAdmin(admin.ModelAdmin):
	list_display = ('first_name', 'last_name')
	
class NoteAdmin(admin.ModelAdmin):
	list_display = ('text', 'date')

lista = ['Student', 'Note']

for name,var in models.__dict__.items():
	if name not in lista:
		if type(var) is ModelBase:
			admin.site.register(var)
			
admin.site.register(Student, StudentAdmin)
admin.site.register(Note, NoteAdmin)]]></programlisting>
</listitem>

<listitem>
<para>Enable the application in the project settings:</para>

<screen><![CDATA[[$] vim projects/settings.py]]></screen>

<programlisting language="python" linenumbering="numbered"><![CDATA[INSTALLED_APPS = (
	...,
	'app1',
)]]></programlisting>
</listitem>

<listitem>
<para>Initialize the application:</para>

<screen><![CDATA[[$] python manage.py migrate]]></screen>
</listitem>

<listitem>
<para>Creates the application's super user:</para>

<screen><![CDATA[[$] python manage.py createsuperuser]]></screen>
</listitem>

<listitem>
<para>Launch the project:</para>

<screen><![CDATA[[$] python manage.py runserver 0.0.0.0:8000]]></screen></listitem>
</orderedlist>
</article>
