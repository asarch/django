<?xml version='1.0' encoding='utf-8'?>

<article xmlns='http://docbook.org/ns/docbook' version='5.0' xml:lang='en'>

<section>
<title>Fecha Por Default</title>
<para>En PostgreSQL tenemos:</para>

<programlisting linenumbering="numbered"><![CDATA[CREATE TABLE user_session(..., start_time timestamp with time zone  DEFAULT now());]]></programlisting>

<para>Esa columna correspondería algo como en Django:</para>

<programlisting linenumbering="numbered"><![CDATA[models.DateTimeField(default=datetime.datetime.now)]]></programlisting>
</section>

<section>
<title>Plantillas</title>

<para>1. Habilitamos la dirección:</para>
<screen linenumbering="numbered"><![CDATA[$] vim projects/urls.py]]></screen>
	
<programlisting linenumbering="numbered"><![CDATA["""projects URL Configuration

The `urlpatterns` list routes URLs to views. For more information please see:
    https://docs.djangoproject.com/en/1.11/topics/http/urls/
Examples:
Function views
    1. Add an import:  from my_app import views
    2. Add a URL to urlpatterns:  url(r'^$', views.home, name='home')
Class-based views
    1. Add an import:  from other_app.views import Home
    2. Add a URL to urlpatterns:  url(r'^$', Home.as_view(), name='home')
Including another URLconf
    1. Import the include() function: from django.conf.urls import url, include
    2. Add a URL to urlpatterns:  url(r'^blog/', include('blog.urls'))
"""
from django.conf.urls import url, include
from django.contrib import admin

from agenda import views

urlpatterns = [
    url(r'^admin/', admin.site.urls),
    url(r'^notas/', views.notas, name='notas'),
]]]></programlisting>

	
<programlisting linenmbering="numbered"><![CDATA[urlpatterns = patterns('',
	...,
	url(r'^notas/', 'agenda.views.notas'),
)]]></programlisting>

2. Creamos el espacio de las plantillas:

<screen linenumbering="numbered"><![CDATA[[$] mkdir -p agenda/templates/agenda]]></screen>

3. Creamos la plantilla del controlador:

<screen linenumbering="numbered"><![CDATA[[$] vim agenda/templates/agenda/index.html]]></screen>
	
<programlisting linenumbering="numbered"><![CDATA[<!DOCTYPE html>
<html>
	<head>
		<title>Notas</title>
	</head>
	<body>
		<h1>Notas</h1>
		<table>
			<thead>
				<th>
					<td>id</td>
					<td>Nombre</td>
					<td>Descripci&oacute;n</td>
					<td>Fecha</td>
					<td>Tipo</td>
				</th>
			</thead>
			<tbody>
				{% for nota in notas %}
				<tr>
					<td>{{ nota.id }}</td>
					<td>{{ nota.nombre }}</td>
					<td>{{ nota.descripcion }}</td>
					<td>{{ nota.fecha }}</td>
					<td>{{ nota.tipo.nombre }}</td>
				</tr>
				{% endfor %}
			</tbody>
		</table>
	</body>
</html>]]></programlisting>

4. Habilitamos el controlador:

[$] vim agenda/views.py

from django.http import HttpResponse
from django.template import RequestContext, loader

# Create your views here.
from models import Nota

def notas(request):
	template = loader.get_template("agenda/notas.html")

	context = RequestContext(request, {'notas' : Nota.objects.order_by('id')})
	return HttpResponse(template.render(context))
</section>

<section>
<title>Imagen de las relaciones de los modelos</title>

1. Instala los siguientes SlackBuilds:

- gts
- graphviz

2. Instala el módulo de Python:

[#] pip --verbose install pygraphviz

3. Instala el módulo de Django:

[#] pip --verbose install django_extensions

4. Habilitalo en el proyecto:

[$] vi proyectos/settings.py
INSTALLED_APPS = (
...,
'django_extensions',
)

5. Sincronizas la base de datos:

[$] python manage.py syncdb

6. Generas la imagen:

[$] python manage.py graph_models -a -g -o models.png
</article>
